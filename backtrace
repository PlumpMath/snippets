#!/bin/bash

# Stolen from:
#   http://www.samba.org/ftp/unpacked/junkcode/segv_handler/

# we want everything on stderr, so the program is not disturbed
exec 1>&2

TIMEOUT=5
#DEBUG=1

if test $# -ne 2 -a $# -ne 1; then
    echo "usage: $0 PID [BACKTRACE-FILE]" 1>&2
    exit 1
fi

PID=$1
TMPFILE=/tmp/gdb.$$

if which dirname >&/dev/null; then
    mkdir -p `dirname $TMPFILE`
fi

trap "rm -f $TMPFILE; exit 1" SIGINT SIGHUP
cat << EOF > "$TMPFILE"
handle all nostop print pass
set height 0
bt full
thread apply all bt full
quit
EOF

if test -z "$2"; then
    BTFILE=gdb.$PID
else
    BTFILE=$2
fi

if which dirname >&/dev/null; then
    mkdir -p `dirname $BTFILE`
fi

BTTMP=${BTFILE}.tmp

trap "rm -f $TMPFILE $BTTMP; exit 1" SIGINT SIGHUP   

#
# I don't know why, but there are some cases that GDB and the target
# process looks hanged.
#
# - Killing the GDB with SIGTERM does not help.
# - Killing the target process DOES help.
#
# So, I made GDB process asynchronous, and after TIMEOUT second(s),
# this script will trying to kill the target process with SIGTERM,
# then SIGKILL.  If it does not help, this script will send SIGTERM and SIGKILL
# to the GDB process respectively.
#

coproc gdb -batch -x $TMPFILE --pid $PID < /dev/null 2>&1 > ${BTTMP}
#gdb --batch -x $TMPFILE --pid $PID 2>&1 #| tee $BTFILE

tm_start=`date +%s`
while true; do
    sleep 0.1

    [ -z "$COPROC_PID" ] && break
    tm_ellapsed=$((`date +%s` - tm_start))
    [ -n "$DEBUG" ] && echo "ellapsed: $tm_ellapsed"

    if [ "$tm_ellapsed" -ge "$TIMEOUT" ]; then
        [ -n "$DEBUG" ] && echo "timeout reached: force quit the program"

        kill -0 "$PID" >&/dev/null && kill -TERM "$PID"
        sleep 0.1

        if kill -0 "$PID" >&/dev/null; then
            [ -n "$DEBUG" ] && echo "COPROC_PID: $COPROC_PID"

            [ -n "$COPROC_PID" ] && kill -KILL "$PID"
            [ -n "$COPROC_PID" ] && sleep 0.2
        fi

        if [ -n "$COPROC_PID" ]; then
            [ -n "$COPROC_PID" ] && kill -TERM "$COPROC_PID"
            [ -n "$COPROC_PID" ] && sleep 0.2
            [ -n "$COPROC_PID" ] && kill -9 "$COPROC_PID"
        fi
        break;
    fi
done

mv ${BTTMP} ${BTFILE}
/bin/rm -f $TMPFILE $BTTMP
exit 0
